---
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: go1.x
    Timeout: 30
    MemorySize: 128
    Environment:
      Variables:
        SECRETS_CLIENT_ID_PARAMETER_NAME: !ImportValue AutoRemindersProductionClientID
        SECRETS_CLIENT_SECRET_PARAMETER_NAME: !ImportValue AutoRemindersProductionClientSecret
        SECRETS_PRODUCTION_SIGNING_SECRET_PARAMETER_NAME: !ImportValue AutoRemindersProductionTokenSecret
        DYNAMODB_TABLE_NAME: !ImportValue AutoRemindersProductionDynamoDBTableName
Resources:
  ##
  # API Resources
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Production
  ApiFunctionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/
      Handler: api-handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - !Ref LambdaPolicy
        - Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Ref UpdateAccountStateMachine
      Environment:
        Variables:
          UPDATE_ACCOUNT_STATE_MACHINE_ARN: !Ref UpdateAccountStateMachine
      Events:
        RootApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Method: any
            Path: /
        RoutedApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Method: any
            Path: /{proxy+}
  ##
  # Update Account
  UpdateVehiclesFunctionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/
      Handler: update-vehicles-handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - !Ref LambdaPolicy
  UpdateTripsFunctionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/
      Handler: update-trips-handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - !Ref LambdaPolicy
  CreateUpdateFunctionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/
      Handler: create-update-handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - !Ref LambdaPolicy
  FinalizeUpdateFunctionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: build/
      Handler: finalize-update-handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - !Ref LambdaPolicy
  UpdateAccountStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub ["states.${AWS::Region}.amazonaws.com", {}]
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt UpdateVehiclesFunctionHandler.Arn
                  - !GetAtt UpdateTripsFunctionHandler.Arn
                  - !GetAtt FinalizeUpdateFunctionHandler.Arn
                  - !GetAtt CreateUpdateFunctionHandler.Arn
  UpdateAccountStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt UpdateAccountStateMachineRole.Arn
      DefinitionString: !Sub
        - |-
          {
            "Comment": "Automatic Account Update",
            "StartAt": "CreateUpdate",
            "States": {
              "CreateUpdate": {
                "Type": "Task",
                "Resource": "${CreateUpdateFunction}",
                "Next": "UpdateVehicles",
                "Catch": [
                  {
                    "ErrorEquals": ["UpdateFailure"],
                    "ResultPath": "$.FailureContext",
                    "Next": "FinalizeUpdate"
                  },
                  {
                    "ErrorEquals": ["States.ALL"],
                    "ResultPath": "$.ErrorContext",
                    "Next": "FinalizeUpdate"
                  }
                ]
              },
              "UpdateVehicles": {
                "Type": "Task",
                "Resource": "${UpdateVehiclesFunction}",
                "Next": "TriggerTripsUpdate",
                "Catch": [
                  {
                    "ErrorEquals": ["UpdateFailure"],
                    "ResultPath": "$.FailureContext",
                    "Next": "FinalizeUpdate"
                  },
                  {
                    "ErrorEquals": ["States.ALL"],
                    "ResultPath": "$.ErrorContext",
                    "Next": "FinalizeUpdate"
                  }
                ]
              },
              "TriggerTripsUpdate": {
                "Type": "Pass",
                "Result": {
                  "Current": "STARTING"
                },
                "ResultPath": "$.Context",
                "Next": "UpdateTrips"
              },
              "UpdateTrips": {
                "Type": "Task",
                "Resource": "${UpdateTripsFunction}",
                "Next": "TripsUpdateCompleteCheck",
                "Catch": [
                  {
                    "ErrorEquals": ["UpdateFailure"],
                    "ResultPath": "$.FailureContext",
                    "Next": "FinalizeUpdate"
                  },
                  {
                    "ErrorEquals": ["States.ALL"],
                    "ResultPath": "$.ErrorContext",
                    "Next": "FinalizeUpdate"
                  }
                ]
              },
              "TripsUpdateCompleteCheck": {
                "Type": "Choice",
                "Choices": [{
                  "Variable": "$.Context.Current",
                  "StringEquals": "DONE",
                  "Next": "FinalizeUpdate"
                }],
                "Default": "PreventRateLimit"
              },
              "PreventRateLimit": {
                "Type": "Wait",
                "Seconds": 2,
                "Next": "UpdateTrips"
              },
              "FinalizeUpdate": {
                "Type": "Task",
                "Resource": "${FinalizeUpdateFunction}",
                "End": true
              }
            }
          }
        - UpdateVehiclesFunction: !GetAtt UpdateVehiclesFunctionHandler.Arn
          UpdateTripsFunction: !GetAtt UpdateTripsFunctionHandler.Arn
          FinalizeUpdateFunction: !GetAtt FinalizeUpdateFunctionHandler.Arn
          CreateUpdateFunction: !GetAtt CreateUpdateFunctionHandler.Arn
  ##
  # Security Resources
  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource:
              - !Sub
                - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Name}
                - Name: !ImportValue AutoRemindersProductionClientID
              - !Sub
                - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Name}
                - Name: !ImportValue AutoRemindersProductionClientSecret
              - !Sub
                - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Name}
                - Name: !ImportValue AutoRemindersProductionTokenSecret
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:DeleteItem
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
              - dynamodb:DescribeTable
            Resource:
              - !ImportValue AutoRemindersProductionDynamoDBTableArn
              - !Sub
                - "${TableArn}/index/*"
                - TableArn: !ImportValue AutoRemindersProductionDynamoDBTableArn
  ##
  # Domain
  ApiRegionalDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub
        - "api.${AWS::Region}.${Domain}"
        - Domain: !ImportValue AutoRemindersDomain
      RegionalCertificateArn: !ImportValue AutoRemindersCertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL
  ApiRegionalMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiRegionalDomain
      RestApiId: !Ref Api
      Stage: !Ref ApiProductionStage
  ApiRegionalDomainRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue AutoRemindersHostedZoneID
      RecordSets:
        - Name: !Sub
            - "api.${AWS::Region}.${Domain}."
            - Domain: !ImportValue AutoRemindersDomain
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ApiRegionalDomain.RegionalHostedZoneId
            DNSName: !GetAtt ApiRegionalDomain.RegionalDomainName
            EvaluateTargetHealth: false
Outputs:
  Api:
    Value: !Sub https://${ApiRegionalDomain}/v1/
